import axios from 'axios'
import { Button, toaster, SettingsIcon, ShareIcon } from 'evergreen-ui'
import { Inter } from 'next/font/google'
import Head from 'next/head'
import { useEffect, useState } from 'react'

import ProgressButtons from '@/components/ProgressButtons'
import SearchComboBox from '@/components/SearchComboBox'
import SettingModal from '@/components/SettingModal'
import ToRankingButton from '@/components/ToRankingButton'
import Tree from '@/components/Tree'
import { useGetWindowSize } from '@/hooks/useGetWindowSize'
import styles from '@/styles/Home.module.css'
import { Tree as TreeType } from '@/types/tree'
import { User } from '@/types/user'

const inter = Inter({ subsets: ['latin'] })

export const getRandomString = (n: number): string => {
	const S = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'

	return Array.from(crypto.getRandomValues(new Uint32Array(n)))
		.map(v => S[v % S.length])
		.join('')
}

export default function Home() {
	const [isShown, setIsShown] = useState(false)
	const [myTree, setMyTree] = useState<TreeType[]>([])
	const [users, setUsers] = useState<User[]>([])
	const { width, height } = useGetWindowSize()
	const totalPoint = myTree.reduce((a, b) => a + b.point, 0)

	const userIds = users.map(user => {
		return user.id
	})

	const handleCopy = () => {
		navigator.clipboard.writeText(`http://localhost:3000/userID/${getRandomString(16)}`).then(
			function () {
				toaster.success('共有リンクがクリップボードにコピーされました！')
			},
			function (err) {
				toaster.warning('コピーに失敗しました')
			},
		)
	}

	useEffect(() => {
		;(async () => {
			const usersRes = await axios.get<User[]>('http://localhost:8000/users')
			const treeRes = await axios.get<TreeType[]>('http://localhost:8000/userID/tree')
			// todo: Promise.all使うとバグる
			setUsers(usersRes.data)
			setMyTree(treeRes.data)
		})()
	}, [])

	return (
		<>
			<Head>
				<title>進捗が木になる～</title>
				<meta name='description' content='Generated by create next app' />
				<meta name='viewport' content='width=device-width, initial-scale=1' />
				<link rel='icon' href='/favicon.ico' />
			</Head>
			<main className={`${styles.main} ${inter.className}`}>
				<div className={styles.topTools}>
					<div
						className={styles.totalPoint}
						style={{
							fontSize: `${width / 6}%`,
						}}
					>
						{totalPoint}pt
					</div>
					<div className={styles.tools}>
						<div className={styles.toolButtons}>
							<ToRankingButton />
							<Button onClick={() => setIsShown(true)}>
								<SettingsIcon />
							</Button>
							<Button onClick={handleCopy}>
								<ShareIcon />
							</Button>
						</div>
						<SearchComboBox users={userIds} />
						<SettingModal isShown={isShown} setIsShown={setIsShown} />
					</div>
				</div>
				<div className={styles.tree}>
					<Tree tree={myTree} />
				</div>
				<ProgressButtons />
			</main>
		</>
	)
}
